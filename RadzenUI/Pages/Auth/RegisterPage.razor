@page "/Account/Register"
@using RadzenUI.Pages.Auth.Models;
@inject IDataProvider data
@inject NavigationManager NavMgr
@inject DialogService DialogService
@inject ILogger<RegisterPage> Logger




	<div class="row justify-content-center my-5">
		<div class="col-lg-8">
			
				<EditForm Model="model" OnValidSubmit="Submit" autocomplete="off">
					<ValidationSummary />

					<DataAnnotationsValidator />
				

						<h2 class="card-title mb-4">Register</h2>

						<label class="form-label" for="@(()=>model.Username)">Username</label>
						<InputText class="form-control mb-4" @bind-Value="@model.Username" @ref=UsernameInput/>			
			
						<label class="form-label" for="@(()=>model.Email)">Email</label>
						<InputText typeof="email" class="form-control mb-4" @bind-Value="@model.Email" />

						<label class="form-label" for="@(()=>model.Password)">Password</label>
						<InputText class="form-control mb-4" type="password" @bind-Value="@model.Password" />

						<label class="form-label" for="@(()=>model.Verify)">Verify</label>
						<InputText class="form-control mb-4" type="password" @bind-Value="@model.Verify" />			

						<button type="submit" class="btn btn-success"> Submit</button>
					
				</EditForm>
			
		</div>
	</div>

	

@code {
	RegisterRequest model = new();
	InputText UsernameInput = default!;

	async void Submit()
	{
		// Check if user exists
		Result<User> u = await data.GetUser(model.Username);
		if(u.IsFailure && !u.IsEmpty) // Something's wrong!
		{
			await DialogService.Alert(u.Error, "Error");
			return;
		}

		if(u.Success)
		{
			//display user exists message
			string msg = $"User {model.Username} already exists.";
			await DialogService.Alert(msg, "Error");
			Logger.LogInformation($"User {model.Username} already exists.");
			return;
		}

		User newUser = new ()
			{
				Id = Guid.NewGuid().ToString(),
				Username = model.Username,
				Email = model.Email,
				PWHash = BCrypt.Net.BCrypt.HashPassword(model.Password)
			};

		Result<User> added = await data.AddUser(newUser);
		if(added.IsFailureOrEmpty)
		{
			//something went wrong. display a message.
			await DialogService.Alert($"{added.Error}.", "Error adding user to database");
			return;
		}

		Result<Calendar> cal = await data.AddCalendar(added.Value.Id, "Default");
		if (cal.IsFailureOrEmpty)
		{
			//something went wrong. display a message.
			await DialogService.Alert($"{cal.Error}.", $"Error adding a calendar for {added.Value.Username}");
			return;
		}




		
		await DialogService.Alert("User Added.", "Success");					

		//clear form
		model = new RegisterRequest();
		StateHasChanged();
			
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
			if ( firstRender && UsernameInput.Element != null)
			{				
				await UsernameInput.Element.Value.FocusAsync();
			}
		
	}
}
