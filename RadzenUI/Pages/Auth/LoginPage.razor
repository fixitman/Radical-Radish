@page "/Account/Login/{ReturnUrl?}"
@using RadzenUI.Pages.Auth.Models;
@using BCrypt.Net;
@using RadzenUI.auth;
@inject NavigationManager NavMgr
@inject IDataProvider data
@inject DialogService dialog
@inject AppState AppState
@inject AuthenticationStateProvider AuthStateProvider


<h3 class="text-center">Please Sign In</h3>

<EditForm Model="request" OnValidSubmit="Submit" autocomplete="off">
	<DataAnnotationsValidator/>	
	
	<div class="row justify-content-center my-5">
		<div class="col-lg-8">
			<ValidationSummary />

			<label class="form-label" for="@(()=>request.Username)">Username</label>
			<InputText class="form-control mb-4" @bind-Value="@request.Username" />

			<label class="form-label" for="@(()=>request.Password)">Password</label>
			<InputText class="form-control mb-4" id="password" type="password" @bind-Value="@request.Password"/>

			<button type="submit" class="btn btn-primary"> Submit</button>
		</div>
	</div>
</EditForm>



@code {
	[Parameter]
	public string? ReturnUrl { get; set; }

	LoginRequest request = new LoginRequest();

	async void Submit()
	{
		// Get user

		Result<User> r = data.GetUser(request.Username);
		if (r.IsFailure) // database or network problems
		{
			await dialog.Alert(r.Error, "Error");
			request = new();
			StateHasChanged();
			return;
		}

		// Check credentials
		if( r.IsEmpty || !BCrypt.Verify(request.Password,r.Value.PWHash)) 
		{
			await dialog.Alert("Incorrect Username or Password", "Error");
			return;
		}

		var authState = await ((CustomAuthStateProvider)AuthStateProvider).ChangeUser(r.Value.Id, r.Value.Username, "Admin");
		var u = authState.User;
		
		NavMgr.NavigateTo(ReturnUrl ?? "/");
	}
}
