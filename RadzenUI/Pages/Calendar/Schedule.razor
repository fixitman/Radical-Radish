@page "/"
@attribute [Authorize]
@using RadzenUI
@using RadzenUI.Shared
@using Radzen

@implements IDisposable

@inject DialogService DialogService
@inject IDataProvider db
@inject AppState AppState



<RadzenScheduler 
    @ref=@scheduler 
    style="height: 768px;" 
    SelectedIndex="2"
    Data=@appointments 
    TItem="Appointment" 
    StartProperty="Start" 
    EndProperty="End"
    TextProperty="Text" 
    SlotSelect=@OnSlotSelect 
    AppointmentSelect=@OnAppointmentSelect 
    SlotRender=@OnSlotRender 
    AppointmentRender=@OnAppointmentRender 
    LoadData=@OnLoadData>
    <RadzenDayView StartTime="@TimeSpan.FromHours(0)" />
    <RadzenWeekView />
    <RadzenMonthView />
    <RadzenYearView />
</RadzenScheduler>



@code {
    RadzenScheduler<Appointment> scheduler;

    IList<Appointment> appointments = new List<Appointment>();    

    protected override void OnInitialized()
    {
        AppState.CalendarChanged += OnCalendarChanged;
        return;
    }

    void OnCalendarChanged(object? sender, CalendarDTO? c)
    {
        scheduler.Reload();
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {


        if (args.View.Text != "Year")
        {
            Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            if (data != null && AppState.CurrentCalendar != null)
            {
                data.CalendarId = AppState.CurrentCalendar.CalendarId;
                var result = await db.AddAppointment(data);
                if (result.Success)
                {
                    appointments.Add(data);                    
                    await scheduler.Reload();
                }
                // Either call the Reload method or reassign the Data property of the Scheduler
            }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        var copy = new Appointment
        {
            Start = args.Data.Start,
            End = args.Data.End,
            Text = args.Data.Text,
            Color = args.Data.Color
        };


        var data = await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", copy } });

        if(data is string && data == "delete")
        {
            var result = await db.DeleteAppointment(args.Data);
            if (result.IsFailure)
            {
                var box = await DialogService.Alert(result.Error, "Database Error");
            }
            else
            {
                appointments.Remove(args.Data);                
            }
        }

        else if(data != null)
        {            
            // Update the appointment
            args.Data.Start = data.Start;
            args.Data.End = data.End;
            args.Data.Text = data.Text;
            args.Data.Color = data.Color;

            var result = await db.UpdateAppointment(args.Data);
            if (result.IsFailure)
            {
                var box = await DialogService.Alert(result.Error, "Database Error");
            }


        }

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // args.Data is the Appointment being rendered
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        args.Attributes["style"] = $"background: {args.Data.Color}";        

        if (args.Data.Text.ToLower().Contains("birthday"))
        {
            args.Attributes["style"] = "background: red";
        }
    }

    async Task OnLoadData(SchedulerLoadDataEventArgs args)
    {
        var result = await db.GetAppointments(AppState.CurrentCalendar.CalendarId, args.Start, args.End);
        if (result.Success)
        {
            appointments.Clear();
            foreach( var a in result.Value)
            {
                appointments.Add(a);
            }
        }
        else if(result.IsFailure)
        {
            bool? boxResult = await DialogService.Alert(result.Error, "Error");
        }
    }

    public void Dispose()
    {
        AppState.CalendarChanged -= OnCalendarChanged;
    }
}