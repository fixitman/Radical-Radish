@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using System.Security.Claims;
@using RadzenUI.Pages.Auth.Models;
@using RadzenUI.auth;
@inject ProtectedSessionStorage Session
@inject AuthenticationStateProvider AuthStateProvider
@inject AppState AppState

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var state = await AuthStateProvider.GetAuthenticationStateAsync();
            var u = state.User;
            if(!(u.Identity?.IsAuthenticated ?? false))
            {
                var r = await Session.GetAsync<AppUser>(AppState.APPUSER);
                if (r.Success)
                {
                    await ((CustomAuthStateProvider)AuthStateProvider).ChangeUser(r.Value.Id, r.Value.Username, r.Value.Role);
                    AppState.User = r.Value;

                }
            }
        }
    }

    class AuthUser
    {
        public string Id { get; set; }
        public string UserName { get; set; }
        public string Role { get; set; }
    }
}
