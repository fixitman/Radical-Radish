@using RadzenUI.Data;
@using System.Collections.Specialized
@inject IDataProvider data
@inject AppState AppState
@implements IDisposable


<nav class="flex-column">
	@foreach (CalendarDTO c in AppState.Calendars){
		<div class="nav-item px-3" onclick="@(()=>ChangeCalendar(c))">
			<NavLink class="nav-link" >
				<span class="oi oi-plus" aria-hidden="true"></span> @($"{c.CalendarName} ({c.OwnerName})")
			</NavLink>
		</div>		
	}
</nav>



@code {

	protected override void OnInitialized()
	{

		AppState.Calendars.CollectionChanged += OnCollectionChanged;
		// if (AppState.Calendars.Count > 0)
		// {
		// 	var myCal = Calendars.Where(c => c.CalendarRole == "OWNER").OrderBy(c=>c.CalendarName).ToList();
		// 	var otherUsers = Calendars.Where(c => c.CalendarRole != "OWNER")
		// 		.Select(c => new {c.OwnerId, c.OwnerName}).DistinctBy(c=>c.OwnerId)
		// 		.OrderBy(c=> c.OwnerName.ToLower())
		// 		.ToList();
		// 	foreach(var o in otherUsers)
		// 	{
		// 		Console.WriteLine(o.OwnerName);
		// 	}

		// }
		return;
	}

	public void ChangeCalendar(CalendarDTO cal)
	{
		AppState.CurrentCalendar = cal;
	}

	public void OnCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
	{
		StateHasChanged();
	}

	public void Dispose()
	{
		AppState.Calendars.CollectionChanged -= OnCollectionChanged;
	}

}
